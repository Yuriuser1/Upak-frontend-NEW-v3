
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/upak-frontend/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Данные товара
  productName     String
  productDescription String @db.Text
  marketplace     String // "wb" или "ozon"
  price           Float
  tariff          String // "start" или "pro"
  
  // Изображения
  productImages   String[] // массив URL изображений в S3
  
  // Статус заказа
  status          String    @default("pending") // pending, processing, completed, failed
  backendOrderId  String?   // ID заказа в backend API
  
  // Результаты
  generatedCardUrl String? // URL готовой карточки (PDF)
  
  // Оплата
  paymentStatus   String    @default("unpaid") // unpaid, paid, failed
  paymentId       String?   // ID платежа в YooKassa
  totalAmount     Float
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  status    String   @default("new") // new, read, replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
